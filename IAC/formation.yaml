AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation Template to create a VPC with two public subnets, two private subnets, an Internet Gateway, a NAT Gateway, a DynamoDB VPC Endpoint, Frontend and Backend Application Load Balancers, and Auto Scaling Groups.'

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: InterviewPrepVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: InterviewPrepIGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: PublicSubnet2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: PublicSubnet3

  PublicSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: PublicSubnet4

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: PrivateRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet4
      RouteTableId: !Ref PublicRouteTable

  DynamoDBVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
      VpcEndpointType: Gateway
      RouteTableIds:
      - !Ref PrivateRouteTable
      Tags:
      - Key: Name
        Value: DynamoDB-VPC-Endpoint

  FrontendALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP from anywhere to Frontend ALB"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: FrontendALBSecurityGroup

  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH & HTTP"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        sourceSecurityGroupId: !Ref FrontendALBSecurityGroup
      Tags:
      - Key: Name
        Value: FrontendSecurityGroup

  FrontendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: [ UploadApiDeployment ]
    Properties:
      LaunchTemplateName: FrontendLaunchTemplate
      VersionDescription: "Version 2"
      LaunchTemplateData:
        ImageId: ami-071226ecf16aa7d96
        InstanceType: t2.micro
        KeyName: dev-key
        SecurityGroupIds:
          - !Ref FrontendSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: FrontendInstance
        UserData:
          Fn::Base64: !Sub |
              #!/bin/bash
              set -e
              exec > /var/log/user-data.log 2>&1

              echo "Updating system packages..."
              yum update -y

              echo "Installing Docker and Git..."
              yum install -y docker git
              service docker start
              usermod -a -G docker ec2-user

              echo "Cloning frontend repository..."
              cd /home/ec2-user
              git clone https://github.com/devpatel43543/milestone2.git || { echo "Git clone failed"; exit 1; }
              chown -R ec2-user:ec2-user /home/ec2-user/milestone2
 

              echo "Navigating to UI directory..."
              cd /home/ec2-user/milestone2/ui
              
              echo "Building Docker image with API URL and Cognito Client ID..."
              docker build \
                --build-arg VITE_GATWAY_URL=https://${ScholarHubApiGatway}.execute-api.${AWS::Region}.amazonaws.com/prod \
                --build-arg VITE_COGNITO_CLIENT_ID="6tvbms1723vnkoqgmccrnnoj4u" \
                -t devkumar640/frontend_milestone2 .

              echo "Running Docker container..."
              docker run -d -p 80:80 --name frontend devkumar640/frontend_milestone2

              echo "Setup complete."
            

  FrontendALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: frontend-ALB
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
      - !Ref FrontendALBSecurityGroup
      Tags:
      - Key: Name
        Value: frontend-ALB

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: frontend-TG
      VpcId: !Ref MyVPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 3
      Tags:
      - Key: Name
        Value: FrontendTargetGroup

  FrontendALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref FrontendALB
      Protocol: HTTP
      Port: 80
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref FrontendTargetGroup

  FrontendASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - FrontendLaunchTemplate
    Properties:
      AutoScalingGroupName: frontend-asg
      VPCZoneIdentifier:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontendLaunchTemplate
        Version: !GetAtt FrontendLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 500
      TargetGroupARNs:
      - !Ref FrontendTargetGroup
      Tags:
      - Key: Name
        Value: frontend-asg
        PropagateAtLaunch: true

  

  CreatePostLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CreatePostLambda
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Architectures:
      - arm64
      Code:
        S3Bucket: formationzip101
        S3Key: Scholar-Hub-Lambda-Code/scholar_hub_creatPost-ad4cf8d5-deaf-4523-8f8d-8911c7364ebe.zip
      Timeout: 120

  GetAllPostsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetAllPostsLambda
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Architectures:
      - arm64
      Code:
        S3Bucket: formationzip101
        S3Key: Scholar-Hub-Lambda-Code/scholar_hub_GetAllPosts-d75dc27c-55de-4ed5-b63a-8100494e948d.zip
      Timeout: 180

  GetUserPostsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetUserPostsLambda
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Architectures:
        - arm64
      Code:
        S3Bucket: formationzip101
        S3Key: Scholar-Hub-Lambda-Code/scholar_hub_GetUserPost-6f1de328-c01b-4e31-af54-fa78c6fe2af2.zip
      Timeout: 120

  DeletePostLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DeletePostLambda
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Architectures:
        - arm64
      Code:
        S3Bucket: formationzip101
        S3Key: Scholar-Hub-Lambda-Code/scholar_hub_deletePost-9d635a5b-5f74-4274-a3c2-51f4472fb20a.zip
      Timeout: 180

  GetObjectLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetObjectLambda
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Architectures:
        - arm64
      Code:
        S3Bucket: formationzip101
        S3Key: Scholar-Hub-Lambda-Code/scholar_hub_downloadObject-b9b71b95-995b-4841-84f7-d667d729a7d9.zip
      Timeout: 120

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
           Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaPermissions
        PolicyDocument:
         Version: "2012-10-17"
         Statement:
         - Effect: Allow
           Action:
           - s3:PutObject
           - s3:GetObject
           Resource: "arn:aws:s3:::formationzip101/*"
         - Effect: Allow
           Action:
           - logs:CreateLogGroup
           - logs:CreateLogStream
           - logs:PutLogEvents
           Resource: "*"
         

  ApiGatewayLambdaInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ApiGatewayLambdaInvokeRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: APIGatewayInvokeLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
            - !GetAtt CreatePostLambda.Arn
            - !GetAtt GetAllPostsLambda.Arn
            - !GetAtt GetUserPostsLambda.Arn
            - !GetAtt GetObjectLambda.Arn
            - !GetAtt DeletePostLambda.Arn

  ScholarHubApiGatway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ScholarHubApiGatway
      Description: API Gateway to trigger Lambda 
      EndpointConfiguration:
        Types:
        - REGIONAL

  CreatePostResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ScholarHubApiGatway
      ParentId: !GetAtt ScholarHubApiGatway.RootResourceId
      PathPart: create-post

  GetAllPostsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ScholarHubApiGatway
      ParentId: !GetAtt ScholarHubApiGatway.RootResourceId
      PathPart: get-all-posts

  GetUserPostsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ScholarHubApiGatway
      ParentId: !GetAtt ScholarHubApiGatway.RootResourceId
      PathPart: get-user-posts

  DeletePostResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ScholarHubApiGatway
      ParentId: !GetAtt ScholarHubApiGatway.RootResourceId
      PathPart: delete-post

  GetObjectResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ScholarHubApiGatway
      ParentId: !GetAtt ScholarHubApiGatway.RootResourceId
      PathPart: download-object

  CreatePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ScholarHubApiGatway
      ResourceId: !Ref CreatePostResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Credentials: !GetAtt ApiGatewayLambdaInvokeRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePostLambda.Arn}/invocations"
        IntegrationResponses:
        - StatusCode: 200
          ResponseTemplates:
            application/json: ""
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
          method.response.header.Content-Type: true
        ResponseModels:
          application/json: "Empty"

  GetAllPostsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ScholarHubApiGatway
      ResourceId: !Ref GetAllPostsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Credentials: !GetAtt ApiGatewayLambdaInvokeRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllPostsLambda.Arn}/invocations"
        IntegrationResponses:
        - StatusCode: 200
          ResponseTemplates:
            application/json: ""
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
          method.response.header.Content-Type: true
        ResponseModels:
          application/json: "Empty"
  
  GetUserPostsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ScholarHubApiGatway
      ResourceId: !Ref GetUserPostsResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Credentials: !GetAtt ApiGatewayLambdaInvokeRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserPostsLambda.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Content-Type: true
          ResponseModels:
            application/json: "Empty"

  DeletePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ScholarHubApiGatway
      ResourceId: !Ref DeletePostResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Credentials: !GetAtt ApiGatewayLambdaInvokeRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeletePostLambda.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Content-Type: true
          ResponseModels:
            application/json: "Empty"

  GetObjectMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ScholarHubApiGatway
      ResourceId: !Ref GetObjectResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Credentials: !GetAtt ApiGatewayLambdaInvokeRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetObjectLambda.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Content-Type: true
          ResponseModels:
            application/json: "Empty"

  UploadApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: [ CreatePostMethod, GetAllPostsMethod, GetUserPostsMethod, DeletePostMethod, GetObjectMethod ]
    Properties:
      RestApiId: !Ref ScholarHubApiGatway
      StageName: prod

  CreatePostOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref CreatePostResource
      RestApiId: !Ref ScholarHubApiGatway
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
        ResponseModels:
          application/json: "Empty"

  GetAllPostsOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref GetAllPostsResource
      RestApiId: !Ref ScholarHubApiGatway
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
        ResponseModels:
          application/json: "Empty"

  GetUserPostsOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref GetUserPostsResource
      RestApiId: !Ref ScholarHubApiGatway
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: "Empty"

  DeletePostOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref DeletePostResource
      RestApiId: !Ref ScholarHubApiGatway
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: "Empty"

  GetObjectOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref GetObjectResource
      RestApiId: !Ref ScholarHubApiGatway
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: "Empty"

  LambdaPermissionCreatePost:
    Type: AWS::Lambda::Permission
    DependsOn: CreatePostLambda
    Properties:
      FunctionName: !Ref CreatePostLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ScholarHubApiGatway}/*"

  LambdaPermissionGetAllPosts:
    Type: AWS::Lambda::Permission
    DependsOn: GetAllPostsLambda
    Properties:
      FunctionName: !Ref GetAllPostsLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ScholarHubApiGatway}/*"

  LambdaPermissionGetUserPosts:
    Type: AWS::Lambda::Permission
    DependsOn: GetUserPostsLambda
    Properties:
      FunctionName: !Ref GetUserPostsLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ScholarHubApiGatway}/*"

  LambdaPermissionDeletePost:
    Type: AWS::Lambda::Permission
    DependsOn: DeletePostLambda
    Properties:
      FunctionName: !Ref DeletePostLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ScholarHubApiGatway}/*"

  LambdaPermissionGetObject:
    Type: AWS::Lambda::Permission
    DependsOn: GetObjectLambda
    Properties:
      FunctionName: !Ref GetObjectLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ScholarHubApiGatway}/*"

Outputs:
  VPCId:
    Description: "VPC ID"
    Value: !Ref MyVPC

  PublicSubnet1Id:
    Description: "Public Subnet 1 ID"
    Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: "Public Subnet 2 ID"
    Value: !Ref PublicSubnet2

  InternetGatewayId:
    Description: "Internet Gateway ID"
    Value: !Ref InternetGateway

  DynamoDBEndpointId:
    Description: "VPC Endpoint ID for DynamoDB"
    Value: !Ref DynamoDBVPCEndpoint

  FrontendALBURL:
    Description: "Load Balancer URL"
    Value: !GetAtt FrontendALB.DNSName
  
  ApiEndpoint:
    Description: "API Gateway Invoke URL"
    Value: !Sub "https://${ScholarHubApiGatway}.execute-api.${AWS::Region}.amazonaws.com/prod/upload"